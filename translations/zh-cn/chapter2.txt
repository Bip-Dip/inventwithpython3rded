  第二章
  交互式终端

本章中包含的内容：

• 整数和浮点数
• 表达式
• 值
• 运算符
• 表达式求值
• 用变量存储值

在你可以编写游戏之前，你需要学习一些基本的编程概念。在这一章里你不会编写游戏，而是先要学习编写游戏所需的这些概念。你将会从如何使用 Python 的交互式终端开始学习。

一些简单的数学运算

按照第一章中的方法运行 IDLE，然后让 Python 计算一些数学题。交互式终端可以拿来当计算器用。在交互式终端的“>>>”提示符之后输入 2 + 2 然后按下键盘上的回车键（ENTER 键，有些键盘上是 RETURN 键）。图 2-1 中，IDLE 回答了结果是数字 4。

图 2-1：在交互式终端中输入 2 + 2。

这道数学问题也是一条简单的编程指令，加号+告诉计算机把数字 2 和 2 相加。表 2-1 列出了 Python 中其他可用的数学符号，其中 - 用来将数字相减，* 则是让数字相乘，而 / 则是让数字做除法运算。

表 2-1：Python 中的各种数学运算符。
运算符  操作
+ 加法
- 减法
* 乘法
/ 除法

在这种情况下，+、-、*、和 / 四个符号就叫做运算符。运算符告诉 Python 如何处理两侧的数字。

整数和浮点数

整数是像 4、99 和 0 这种数字，而浮点数是像 3.5、42.1 和 5.0 等等这样的分数或者小数。在 Python 中，数字 5 是整数，而 5.0 则是浮点数。这些数字叫做值。

表达式

以上的数学问题就是表达式，计算机可以在几秒的时间里计算上百万条这样的式子。表达式是由运算符（数学符号）连接值（数字）组成的。试着在交互式终端里输入以下的一些数学式，每输入一个就按下回车键。

2+2+2+2+2
8*6
10-5+6
2  +       2

输入完这些指令后，交互式终端看起来会像图 2-2 一样。

图 2-2：输入完指令之后的 IDLE 窗口。

图 2-3：一条表达式由值和运算符组成。

在上面的例子 2  +       2 中，注意值和运算符之间可以有任意数量的空格，但是在交互式终端里输入指令时，不要在指令的开头添加空格。

表达式求值

当计算机计算表达式 10 + 5 并且算出结果 15 时，它就在对这条表达式求值。对表达式求值会将其计算为一个单独的值，就像计算一道数学题求出答案一样。表达式 10 + 5 和 10 + 3 + 2 具有相同的值，都是 15。

表达式可以任意长，但它们都会被求值成一个单独的值，而这个单独的值也是表达式：表达式 15 求值的结果是值 15。例如，表达式 8 * 3 / 2 + 2 + 7 - 9 会按以下步骤求值为值 12.0：

8 * 3 / 2 + 2 + 7 – 9
                  ▼
   24 / 2 + 2 + 7 – 9
                  ▼
     12.0 + 2 + 7 – 9
                  ▼
         14.0 + 7 – 9
                  ▼
             21.0 – 9
                  ▼
                 12.0

你在交互式终端里看不到这些步骤，交互式终端只会完成计算然后告诉你结果：

>>> 8 * 3 / 2 + 2 + 7 - 9
12.0

注意，除法运算符 / 求值的结果会是一个浮点数，例如 24 / 2 的求值结果是 12.0。应用在浮点数上的数学运算符也会被求值成浮点数，例如 12.0 + 2 的求值结果是 14.0。

语法错误

如果你在交互式终端里输入 5 +，你会看到一条错误信息。

>>> 5 +
SyntaxError: invalid syntax

出现这个错误的原因是 5 + 并不是一条表达式。表达式是由运算符连接起来的值，运算符 + 之后理应出现一个值，但是缺少了这个值，就出现了错误信息。

SyntaxError（语法错误）表示你输入的指令有误，Python 无法理解这条指令。编程并不只是告诉计算机要做什么，还要知道怎么样告诉计算机。

但是，不要害怕出错。出错并不会损坏你的电脑，只要在下一个 >>> 提示符之后重新输入正确的指令就可以了。

用变量存储值

你可以用变量将表达式求值得到的值保存下来，从而可以在之后使用。你可以用变量来存储值，变量就像一个可以存放一个值的盒子。

使用赋值语句可以把值保存到变量中。输入变量的名字，之后跟上 = 号（称为赋值运算符），然后是要在变量中存储的值。例如，在交互式终端中输入 spam = 15：

>>> spam = 15
>>>

15 这个值会被存放到 spam 变量的盒子里。“spam”这个名字就像是贴在盒子上的标签（Python 用它来区分不同的变量），而值会写在盒子里的一张便条上。

当你按下回车键时你不会看到任何回应。在 Python 中，如果没有出现错误信息，就可以认为指令成功执行了。下方出现的 >>> 提示符提醒你继续输入之后的指令。

图2-4：变量就像是可以装值的盒子。

和表达式不同，语句是不能计算出值的指令，因此在交互式终端里输入 spam = 15 之后下一行不会出现任何值。如果你很难判断究竟哪些指令是表达式、哪些指令是语句，记住表达式可以计算出一个值，其他的指令都是语句。

变量中存放的是值而不是表达式。例如，spam = 10 + 5 和 spam = 10 + 7 - 2 这两条语句中的表达式不相同，但求值的结果都是 15。它们的结果是一样的：两条赋值语句都会在变量 spam 中存放值 15。

如果第一次在赋值语句中使用变量，Python 就会创建这个变量。要判断变量中存放的值是多少，只需要在交互式终端中输入变量的名字：

>>> spam = 15
>>> spam
15

表达式 spam 的求值结果是存放在变量 spam 中的值：15。你可以在表达式中使用变量，试着在交互式终端中输入以下代码：

>>> spam = 15
>>> spam + 5
20

你已经将变量 spam 的值设为 15，因此 spam + 5 就相当于表达式 15 + 5。以下是 spam + 5 求值的步骤：

spam + 5
     ▼
 15  + 5
     ▼
    20

在使用赋值语句创建一个变量之前，你不能够使用这个变量。因为这个变量还不存在，Python 会提示一个 NameError 错误。拼错变量名也会导致这个错误：

>>> spam = 15
>>> spma
Traceback (most recent call last):
  File "<pyshell#8>", line 1, in <module>
    spma
NameError: name 'spma' is not defined

出现错误的原因是有一个名叫 spam 的变量，而没有名叫 spma 的变量。

你可以用另一条赋值语句改变变量中存储的值。例如，尝试在交互式终端中输入以下代码：

>>> spam = 15
>>> spam + 5
20
>>> spam = 3
>>> spam + 5
8

当你第一次输入 spam + 5 时，因为 spam 中的值是 15，表达式的值是 20。然而，当你输入 spam = 3 时，spam 中的值 15 被替换或者说被覆盖了，变成了 3。现在你输入 spam + 5，因为 spam 的值变成 3 了，表达式的值就是 8。图 2-5 展示了覆盖。

图 2-5：spam 中的值 15 被 3 覆盖。

你还可以用变量 spam 中的值为 spam 自身赋值：

>>> spam = 15
>>> spam = spam + 5
20

赋值语句 spam = spam + 5 就像在说：“变量 spam 新的值是它现在的值加上 5。”在交互式终端中输入以下代码，再将 spam 的值增大几次，每次加 5：

>>> spam = 15
>>> spam = spam + 5
>>> spam = spam + 5
>>> spam = spam + 5
>>> spam
30

使用更多的变量

在程序中，你可以根据需要创建任意数量的变量。例如，我们来为两个分别叫 eggs 和 bacon 的变量赋不同的值：

>>> bacon = 10
>>> eggs = 15

现在变量 bacon 中的值是 10，而 eggs 的值是 15。每个变量都有一个自己的盒子存放着自己的值，如图 2-6 所示。

图2-6：变量“bacon”和“eggs”都存放了值。

试着在交互式终端中输入 spam = bacon + eggs，然后检查 spam 现在的值：

>>> bacon = 10
>>> eggs = 15
>>> spam = bacon + eggs
>>> spam
25

spam 现在的值是 25。当你将 bacon 和 eggs 相加时，你相加的是它们各自的值，也就是 10 和 15。变量包含着值而不是表达式。变量 spam 被赋值 25，而不是表达式 bacon + eggs，在赋值语句 spam = bacon + eggs 之后，修改 bacon 和 eggs 并不会影响 spam。

总结

在这一章中，你学习了编写 Python 指令的基础知识。Python 需要你用严格的方式告诉它需要做什么。计算机并不具有常识，只能理解特定的指令。

表达式是由运算符（例如 + 和 -）连接的值（例如 2 和 5）组成的。Python 可以为表达式求值，将表达式计算为一个单独的值。你可以用变量存储值，程序就可以记住这些值，并在之后使用。

Python 中还有很多种运算符和值，在下一章中，你会了解更多的基础知识，并开始编写你的第一个程序。你会学习如何在表达式中使用文本。Python 并不仅仅局限于数字，它可不只是一个计算器！