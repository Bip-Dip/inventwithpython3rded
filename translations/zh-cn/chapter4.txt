    第四章
    猜数字

本章中包含的内容：

•   import 语句
•   模块
•   while 语句
•   条件
•   代码块
•   布尔值
•   比较运算符
•   = 和 == 的区别
•   if 语句
•   break 关键字
•   str()、int() 和 float() 函数
•   random.randint() 函数

在这一章中，你将会做一个“猜数字”游戏。计算机会想一个 1 到 20 之间的随机数，然后让你来猜。计算机会告诉你每次你猜的数字是太大了还是太小了。如果你能在 6 次尝试内猜出数字就算获胜。

这是一个值得编写的好游戏，因为它在一个简短的程序中用到了随机数、循环以及用户输入。你会学到如何将值转换为不同的数据类型，以及为什么需要这样做。既然这个程序是个游戏，我们就把用户称作玩家，当然说“用户”也没有错。

猜数字的示例运行

下面是玩家运行游戏之后的效果。用户的输入用粗体表示。

你好！你叫什么名字？
Albert
好的，Albert，我正在想一个 1 到 20 之间的随机数。
猜一猜。
10
你猜的数字太大了。
猜一猜。
2
你猜的数字太小了。
猜一猜。
4
做得好，Albert！你在 3 次内就猜到了我的数字！

猜数字的源代码

点击文件 ► 新窗口打开一个新的文件编辑器窗口。在出现的空白窗口里，输入下面的源代码并保存为 guess.py，然后按 F5 运行程序。当你在文件编辑器中输入这些代码时，一定要注意一些行之前的空格，有些行有 4 个或者 8 个空格的缩进。

重要提示！本书中的程序只能在 Python 3 中运行，在 Python 2 中无法运行。当 IDLE 窗口启动时，在顶部会显示类似“Python 3.4.2”的文字。如果你安装了 Python 2，你也可以同时安装 Python 3。要下载 Python 3，请访问 https://python.org/download/。

如果你在输入代码之后遇到了错误，使用位于 http://invpy.com/diff/guess 的在线纠错工具将你输入的代码与本书中的代码进行对比。

guess.py

 1. # 这是一个猜数字游戏。
 2. import random
 3.
 4. guessesTaken = 0
 5.
 6. print('你好！你叫什么名字？')
 7. myName = input()
 8.
 9. number = random.randint(1, 20)
10. print('好的，' + myName + '，我正在想一个 1 到 20 之间的随机数。')
11.
12. while guessesTaken < 6:
13.     print('猜一猜') # print 前面有 4 个空格。
14.     guess = input()
15.     guess = int(guess)
16.
17.     guessesTaken = guessesTaken + 1
18.
19.     if guess < number:
20.         print('你猜的数字太小了。') # print 前面有 8 个空格。
21.
22.     if guess > number:
23.         print('你猜的数字太大了。')
24.
25.     if guess == number:
26.         break
27.
28. if guess == number:
29.     guessesTaken = str(guessesTaken)
30.     print('做得好，' + myName + '！你在 ' + guessesTaken + '次内就猜到了我的数字！')
31.
32. if guess != number:
33.     number = str(number)
34.     print('不对。我想的数字是 ' + number)

import 语句

1. # 这是一个猜数字游戏。
2. import random

第一行是一条注释。记住 Python 会忽略掉 # 号之后的所有内容。注释的作用只是对程序的内容做出提示。

第二行是一条 import 语句。记住，语句是执行一些操作的指令，并不会像表达式那样计算出一个值。你已经见过语句了：赋值语句将值存储到变量中。

尽管 Python 包含了许多内置函数，一些函数存在于单独的程序中，这些程序叫做模块。要想使用这些函数，你需要使用 import 语句将对应的模块导入到你的程序中。

第 2 行将名叫 random 的模块导入进来，这样你的程序就可以调用 random.randint() 了。这个函数会生成一个随机数让用户来猜。

4. guessesTaken = 0

第 4 行建立了一个名叫 guessesTaken 的新变量。你将会把用户猜过的次数保存在这个变量中。既然在这个时候用户还没有做过任何猜测，这里就把整数 0 存进这个变量。

6. print('你好！你叫什么名字？')
7. myName = input()

第 6 和第 7 行与第三章的程序 Hello World 中相同。程序员经常会重用他们所写的其他程序中的代码来减少自己的工作量。

第 6 行调用了 print() 函数。记住函数就像是程序中的迷你程序，当你的程序调用一个函数时，它就会运行这个迷你程序。print() 函数里的代码会把你传递进去的字符串参数显示在屏幕上。

第 7 行会让用户输入名字，并存储到变量 myName 中。（记住，这个字符串不一定真的是玩家的名字，它只是玩家输入的任何字符串。计算机是一个不论是什么指令都会执行的傻子。）

random.randint() 函数

9. number = random.randint(1, 20)

第 9 行调用了一个新的函数叫做 randint()，并将返回的值保存在 number 里。记住，能计算出一个值的函数调用可以是表达式的一部分。

randint() 函数是 random 模块提供的，因此你必须将它写在 random. 后面（别忘了写那个点！）来告诉 Python 这个 randint() 函数是在 random 模块中的。

randint() 函数会返回一个随机整数，这个数字的大小会在你传递进去的两个整数参数之间（也包括这两个整数）。第 9 行将 1 和 20 写在函数名之后括号中并用逗号隔开从而传递给函数。randint() 返回的随机整数被存储在名叫 number 的变量中，这就是玩家将要猜测的秘密数字。

耽误一小会工夫，回到交互式终端中并输入 import random 来导入 random 模块，然后输入 random.randint(1, 20) 来看看这个函数调用会得到什么。它会返回一个 1 到 20 之间的整数。再次输入这行代码，这次函数调用会返回一个不同的整数。randint() 函数每次都会返回一个随机整数，就像掷骰子一样：

>>> import random
>>> random.randint(1, 20)
12
>>> random.randint(1, 20)
18
>>> random.randint(1, 20)
3
>>> random.randint(1, 20)
18
>>> random.randint(1, 20)
7

当你想为游戏添加一些随机性时，使用 randint() 函数。你将会在许多游戏中使用随机特性（想想有多少棋盘游戏用到了骰子）。

你还可以通过改变参数来尝试不同的范围。例如，输入 random.randint(1, 4) 就会只得到 1 和 4 之间（也包括 1 和 4）的整数，而 random.randint(1000, 2000) 则会生成 1000 和 2000 之间的整数。

例如，在交互式终端中输入下面的代码。你调用 random.randint() 函数时得到的结果可能有所不同（当然，它是随机的）。

>>> random.randint(1, 4)
3
>>> random.randint(1000, 2000)
1294

你可以对游戏的代码稍加改变来让游戏的行为有所不同。试着将第 9 和第 10 行从这样：

 9. number = random.randint(1, 20)
10. print('好的，' + myName + '，我正在想一个 1 到 20 之间的随机数。')

……改成这样：

 9. number = random.randint(1, 100)
10. print('好的，' + myName + '，我正在想一个 1 到 100 之间的随机数。')

这样计算机就会想一个 1 到 100 之间的整数，而不是 1 到 20。修改第 9 行会改变随机数的范围，但是记得同时修改第 10 行从而让游戏将新的范围告诉玩家，而不是旧的范围。

欢迎玩家

10. print('好的，' + myName + '，我正在想一个 1 到 20 之间的随机数。')

第 10 行，print() 函数通过玩家的名字对玩家表示欢迎，并且告知玩家计算机正在想一个随机数字。

看起来第 10 行好像有不止一个字符串参数，但是仔细看，加号把三个字符串连接起来，最终计算得到一个字符串，这个字符串就是传递给 print() 函数的参数。如果你凑近看，你会看到逗号是包含在引号中的，是字符串本身的一部分。

循环

12. while guessesTaken < 6:

第 12 行是一个 while 语句，指示出 while 循环的开始。循环可以让你将代码一次又一次地执行，然而，在学习循环之前，你需要先学习一些其他的概念。这些概念包括代码块、布尔值、比较运算符、条件和 whle 语句。

代码块

多行代码可以被组织起来，形成一个代码块。代码块中的每一行代码都有相同的最小缩进量。你可以通过一行前面的空格数来判断代码块从哪里开始，这些空格叫做这一行的缩进。

当一行代码的缩进增加时（通常以 4 个空格为单位），代码块就开始了，接下来同样缩进 4 个空格的行也是这个代码块的一部分。当某一行代码的缩进与代码块开始之前的缩进相同时，代码块就会结束。也就是说，代码块可以包含在其他的代码块中。图 4-1 标识出了代码块的轮廓并加上了编号。

在图 4-1 中，第 12 行没有缩进，因此就不属于任何代码块。第 13 行有 4 个空格的缩进，因为这个缩进比上一行的缩进多，一个新的代码块就开始了，这个代码块在图 4-1 中被标记为 (1)。这个代码块会一直持续到没有空格的一行（代码块开始前的原始缩进量）。空行会被忽略掉。

第 20 行有 8 个空格的缩进，因为 8 个空格比 4 个空格多，所以就开始了一个新的代码块，在图 4-1 中被标记为 (2)。这个代码块在另一个代码块的内部。

图 4-1：代码块和它们的缩进。黑点代表空格。

第 22 行只有 4 个空格。因为缩进量减少了，你就知道代码块结束了。第 20 行是代码块中的唯一一行。第 22 行与其他有 4 个空格的行在同一个代码块中。

第 23 行将缩进量增加到 8 个空格，因此又一个新的代码块开始了，在图 4-1 中标记为 (3)。

再回顾一下，第 12 行不属于任何代码块。第 13 到 23 行都在代码块 (1) 中。第 20 行属于代码块中的代码块，标记为 (2)。第 23 行是代码块中的另一个代码块的唯一一行，标记为 (3)。

布尔数据类型

布尔数据类型只有两个值：True 和 False。这些值必须以大写的“T”和“F”开始，之后的字母必须都是小写。你会用布尔值（简写为 bool）和比较运算符来构成条件（后面会解释条件）。

例如，试着在变量中存储布尔值：

>>> spam = True
>>> eggs = False

到目前为止已经介绍的数据类型有整数、浮点数、字符串，以及现在介绍的布尔类型。Python 中的每个值都属于一个数据类型。

比较运算符

第 12 行有一个 while 语句：

12. while guessesTaken < 6:

while 关键字后面的表达式（guessesTaken < 6）包含两个值（变量 guessesTaken 中的值和整数值 6），用一个运算符（“小于”号 <）连接起来。< 符号是一个比较运算符。

比较运算符会比较两个值，并返回一个布尔值 True 或者 False。表 4-1 包含所有的比较运算符：

表 4-1：比较运算符。
运算符符号   运算符名称
<   小于
>   大于
<=  小于或等于
>=  大于或等于
==  等于
!=  不等于

你已经了解了 +、-、* 和 / 这些数学运算符。和其他运算符一样，比较运算符将值连接起来构成一个表达式，例如 guessesTaken < 6。

条件

条件是一个用比较运算符（例如 < 或者 >）连接起两个值并且计算得到一个布尔值的表达式。条件只是给计算得到 True 或 False 的表达式起的另外一个名字。while 语句中会用到条件（以及其他的一些指令，后面会进行解释）。

例如，guessesTaken < 6 这个条件是在询问，“guessesTaken 中存储的值是否小于数字 6？”如果是的话，条件计算的结果就是 True；如果不是，那么就是 False。

以“猜数字”程序为例，在第 4 行你把 0 存储在了 guessesTaken 中。因为 0 小于 6，因此这个条件计算得到布尔值 True。求值过程会像是这样：

guessesTaken < 6
             ▼
           0 < 6
             ▼
            True

布尔值、比较运算符和条件的一些实验

在交互式终端里输入以下表达式，观察他们的布尔值结果：

>>> 0 < 6
True
>>> 6 < 0
False
>>> 50 < 10
False
>>> 10 < 11
True
>>> 10 < 10
False

条件 0 < 6 返回布尔值 True，是因为数字 0 小于数字 6。但是因为 6 并不小于 0，因此条件 6 < 0 的结果是 False。50 不小于 10，因此 50 < 10 是 False。10 小于 11，因此 10 < 11 是 True。

注意，10 < 10 的结果是 False，这是因为数字 10 并不小于数字 10，它们是一样大的。如果 Alice 和 Bob 一样高，你不会说 Alice 比 Bob 高或者 Alice 比 Bob 矮。这两种陈述都是错误的。

现在试着在交互式终端中输入这些表达式：

>>> 10 == 10
True
>>> 10 == 11
False
>>> 11 == 10
False
>>> 10 != 10
False
>>> 10 != 11
True
>>> 'Hello' == 'Hello'
True
>>> 'Hello' == 'Goodbye'
False
>>> 'Hello' == 'HELLO'
False
>>> 'Goodbye' != 'Hello'
True

= 和 == 的区别

不要把赋值运算符（=）和“等于”比较运算符（==）搞混。在赋值语句中要使用等于号（=）来将值存进变量，而在表达式中使用双等于符号（==）则是判断两个值是否相等。当你想用其中一个时，很容易会误用成另一个。

只要记住“等于”比较运算符（==）中有两个字符，就像“不等于”比较运算符（!=）中也有两个字符一样。

字符串和整数永远也不会彼此相等。例如，试着在交互式终端中输入以下代码：

>>> 42 == 'Hello'
False
>>> 42 != '42'
True

使用 while 语句进行循环

while 语句标识着循环的开始。循环可以将同样的代码重复执行。当程序执行到 while 语句时，它会计算 while 关键字后面的条件，如果条件为 True，执行流会移动到接下来的代码块中，这个代码块称作 while 代码块（在这个程序中，while 代码块从第 13 行开始）。如果条件为 False，那么执行流就会跳过 while 代码块。在猜数字程序中，while 代码块之后的第一行代码是在第 28 行。

一条 while 语句在条件之后总会有一个分号（:）。以分号结束的语句会期望在下一行出现一个新的代码块。

12. while guessesTaken < 6:

图 4-2：while 循环的条件。

图 4-2 展示了执行流是如何根据条件移动的。如果条件计算得到 True（也就是第一次的结果，因为 guessesTaken 的值是 0），执行流会进入 13 行的 while 代码块并且继续运行。一旦程序执行到 while 代码块的结尾，执行流不会继续执行下一行，而是跳回到 while 语句所在的行（第 12 行）并且重新计算条件的值。和之前一样，如果条件是 True 的话，执行流会再次进入 while 代码块。每一次执行流做完循环叫做一次迭代。

这就是循环的工作方式。只要条件是 True，程序就会一直执行 while 代码块中的代码，直到条件第一次变成 False。想象 while 语句在说：“只要这个条件是真的，就继续执行下面代码块中的代码。”

让玩家猜测

13.     print('猜一猜。') # print 之前有四个空格。
14.     guess = input()

第 13 到第 17 行要求玩家猜测秘密数字是什么，并让玩家输入他们所猜的数字。这个数字会保存在名叫 guess 的变量中。

使用 int()、float() 和 str() 函数转换值

15.     guess = int(guess)

第 15 行调用了一个名叫 int() 的新函数。int() 这个函数取入一个参数，返回这个参数的整数形式。试着在交互式终端中输入以下代码：

>>> int('42')
42
>>> 3 + int('2')
5

int('42') 会返回整数值 42。但是，尽管你可以把一个字符串传入 int() 函数，并不是所有的字符串都可以。向 int() 传入 '四十二' 就会导致错误。你传递给 int() 的字符串必须由数字构成：

>>> int('四十二')
Traceback (most recent call last):
  File "<pyshell#5>", line 1, in <module>
int('forty-two')
ValueError: invalid literal for int() with base 10: 'forty-two'

3 + int('2') 这一行代码展示了一个使用了 int() 的返回值的表达式。它会求得整数值 5:

3 + int('2')
  ▼
3 + 2
  ▼
  5

记住，input() 函数永远都会返回玩家所输入文本的字符串。如果玩家输入 5，那么 input() 函数会返回字符串值 '5'，而不是整数值 5。Python 不能使用比较运算符 < 和 > 来比较一个字符串和一个整数值：

>>> 4 < '5'
Traceback (most recent call last):
  File "<pyshell#0>", line 1, in <module>
    4 < '5'
TypeError: unorderable types: int() < str()

在第 14 行，变量 guess 保存的是用户输入的原始字符串值，而在第 15 行用 int() 返回的整数值覆盖了 guess 中的字符串值。这样就能在之后的程序中判断 guess 是否大于、小于或者等于变量 number 中保存的秘密数字。

最后一点：调用 int(guess) 并不会改变变量 guess 中的值。int(guess) 只是一个表达式，可以求得变量 guess 中存储的字符串的整数形式。改变 guess 的是这条赋值语句：guess = int(guess)。

float()、str() 和 bool() 函数很相似，会分别返回参数的浮点数、字符串和布尔形式。试着在交互式终端中输入以下代码：

>>> float('42')
42.0
>>> float(42)
42.0
>>> str(42)
'42'
>>> str(42.0)
'42.0'
>>> str(False)
'False'
>>> bool('')
False
>>> bool('任意非空字符串')
True

使用 int()、float()、str() 和 bool() 方法，你可以传入一个数据类型的值，然后得到它在另一个数据类型中的形式。

变量自增

17.     guessesTaken = guessesTaken + 1

用户做了一次猜测之后，猜测的次数就应该增加 1。

在循环的第一次迭代中，guessesTaken 的值是 0，Python 会取出这个值并将它与 1 相加。0 + 1 的值是 1，这个值会被重新存储到 guessesTaken 中。可以这样理解第 17 的含义：“guessesTaken 变量要比它现在的值再多一个。”

将变量的整数或浮点数值增加 1 称为变量的自增。将变量的整数或浮点数值减少 1 则成为变量的自减。

if 语句

19.     if guess < number:
20.         print('你猜的数字太小了。') # print 前面有 8 个空格。

第 19 行是一条 if 语句。如果 if 语句的条件为 True，执行流就会运行之后的代码块中的代码。如果条件是 False，那么 if 代码块中的代码就会被跳过。使用 if 语句，你可以让程序只在你想的时候运行某些代码。

第 19 行检查玩家的猜测是否小于计算机的秘密数字。如果是的话，执行流就会移动到第 20 行的 if 代码块内部，显示出一条消息将这一情况告诉玩家。

if 语句的工作方式与 while 语句几乎一致。但是不像 while 代码块，if 代码块执行完毕之后执行流不会跳回到 if 语句，而是继续执行下一行。换句话说，if 语句不会循环。图 4-3 对比了这两条语句。

图 4-3：if 和 while 语句。

22.     if guess > number:
23.          print('你猜的数字太小了。')

第 22 行检查玩家的猜测是否大于秘密数字。如果这个条件是 True，就调用 print() 方法来告诉玩家他们猜的数字太大了。

使用 break 语句跳出循环

25.     if guess == number:
26.          break

第 25 行的 if 语句检查 guess 是否与秘密数字相等。如果是的话，程序就会执行第 26 行的 break 语句。

break 语句会告诉执行流立即跳出 while 代码块并跳转到 while 代码块之后的第一行。break 语句不会再次检查 while 循环的条件。

break 语句只会在循环中使用，例如在 while 代码块中。

如果玩家的猜测不等于秘密数字，那么执行流会来到 while 代码块的末尾。这就意味着执行流会回到顶部并重新检查第 12 行的条件（guessesTaken < 6）。记住在执行了 guessesTaken = guessesTaken + 1 语句之后，guessesTaken 的值会变成 1，因为 1 < 6 是 True，执行流会再次进入循环。

如果玩家一直猜得太大或者太小，guessesTaken 的值就会依次变成 2、3、4、5 直到 6。当 guessesTaken 中存储的值是数字 6 时，while 语句的条件（guessesTaken < 6）就会是 False，因为 6 并不小于 6。因为 while 语句的条件是 False，执行流就会移动到 while 代码块之后的第一行，也就是第 28 行。

判断玩家是否胜利

28. if guess == number:

第 28 行没有缩进，代表着 while 代码块结束了，这是 while 代码块之后的第一行。要么因为 while 语句的条件是 False（当玩家用完了猜测次数之后）要么因为执行了第 26 行的 break 语句（当玩家猜中了数字时），执行流会离开 while 代码块。

第 28 行检查玩家是否猜中了数字。如果是的话，执行流就会进入 29 行的 if 代码块。

29.     guessesTaken = str(guessesTaken)
30.     print('做得好，' + myName + '！你在 ' + guessesTaken + '次内就猜到了我的数字！')

只有第 28 行 if 语句的条件为 True 时（也就是玩家正确地猜中了计算机的数字时），第 29 和 30 行才会被执行。

第 29 行调用了 str() 函数，这个函数会返回 guessesTaken 的字符串形式。第 30 行连接了多个字符串，告诉玩家他赢得了胜利以及使用了多少次猜测机会。只有字符串才能与其他字符串相连，这也就是为什么第 29 行要把 guessesTaken 转换为字符串的形式。否则的话，把字符串和一个整数连接起来会让 Python 显示一个错误。

判断玩家是否失败

32. if guess != number:

第 32 行使用了“不等于”比较运算符 != 来判断玩家的最后一次猜测是否与秘密数字相同。如果这个条件为 True，执行流就会移动到第 33 行的 if 代码块。

第 33 和第 34 行是在 if 代码块之中，只有在第 32 行的条件为 True 时才会执行。

33.     number = str(number)
34.     print('不对。我想的数字是 ' + number)

在这个代码块中，程序会告诉玩家他们没能猜出来的秘密数字是什么。这需要用到字符串连接，但是 number 是一个整数值。第 33 行用 number 的字符串形式覆盖了这个变量，因此它才可以在第 34 行与 '不对。我想的数字是 ' 这个字符串相连接。

到这里，执行流到达了代码的结尾，程序就会终止。恭喜！你已经完成了你的第一个真正的游戏！

你可以通过改变玩家可用的猜测次数来更改游戏的难度。要让玩家只有四次机会，把第 12 行的：

12. while guessesTaken < 6:

修改为：

12. while guessesTaken < 4:

while 代码块之后的代码会在每次迭代中将变量 guessesTaken 增加 1。通过将条件修改为 guessesTaken < 4，你可以确保循环中的代码只会运行 4 次，而不是 6 次，这样就会让游戏更加困难。要让游戏变得简单一点，把条件改为 guessesTaken < 8 或者 guessesTaken < 10，这样就会让循环执行更多的次数，可以接受用户的更多次猜测。

流程控制语句

在之前的章节里，程序的执行流从程序最上面的语句开始，一直向下执行，按顺序执行每一条语句。但是使用 while、if、else 和 break 语句，你可以让执行流根据条件进行循环或者跳过一些语句。这类语句的名字叫做流程控制语句，因为它们可以在程序执行流运行的时候改变它的流程。

总结

如果有人问你：“编程到底是什么？”你要怎么回答呢？编程只是一种为程序编写代码的行为，也就是说，创建能让计算机执行的程序。

“但是程序到底是什么？”当你看到一个人用着计算机程序（例如，玩你的“猜数字”游戏），你能看到的只是屏幕上显示的文本。程序根据它所包含的指令以及玩家在键盘上的输入（程序的输入），决定着究竟要在屏幕上显示什么文本（程序的输出）。程序只是一组对用户的输入进行操作的指令。

“什么类型的指令？”只有几种类型的指令，真的。

1.  表达式是由运算符连接起来的值。表达式都可以被求值得到一个单一的值，例如 2 + 2 求得 4 或者 'Hello' + ' ' + 'World' 求得 'Hello World'。当表达式用在 if 和 while 关键字之后时，你还可以把它们叫做条件；
2.  赋值语句将值存储到变量中，这样你就可以在后面的程序中记起这些值；
3.  if、while 和 break 语句是流程控制语句，可以让执行流跳过指令、循环执行指令或者跳出循环。函数调用也可以通过跳转到函数内部的指令从而改变执行流程；
4.  print() 和 input() 函数。这些函数在屏幕上显示文本并从键盘获取文本，因为它们处理程序的输入（Input）和输出（Output），所以叫做 I/O（按照字母发音，“eye-oh”）。

就这些，只有这四个东西。当然，关于这四种指令还有更多的细节，在这本书里你会学到新的数据类型和运算符、新的流程控制语句以及 Python 自带的其他许多函数。还有许多不同类型的 I/O 操作，例如从鼠标输入或者输出音频或者图形而不只是文字。

对于使用你的程序的用户来说，他们只关心最后一种类型，也就是 I/O。用户在键盘上输入，然后从屏幕上看到一些东西并从扬声器中听到一些东西。但是计算机需要计算出要显示什么画面、要播放什么声音，因此它需要程序，而程序只不过是你——程序员——所写的一系列指令而已。
